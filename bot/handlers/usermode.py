from asyncio import create_task, sleep

from aiogram import Router, F, Bot
from aiogram.dispatcher.filters import Command
from aiogram.types import ContentType
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.blocklists import banned, shadowbanned
from bot.config_reader import config
from bot.filters import SupportedMediaFilter
from aiogram.methods.get_chat_member import GetChatMember
from bot.data import db
from bot.data.db import Database
import random
from array import *

db = Database('database.py')

bot = Bot(token=config.bot_token.get_secret_value())

router = Router()



async def _send_expiring_notification(message: Message):
    return




@router.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start
    """
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        await message.answer(
            "–°–∞–ª–∞–º–∞–ª–µ–∫—É–º ‚úåÔ∏è\n"
            "C –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–∏–º —Ö–æ–∑—è–∏–Ω–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç. "
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥.")


@router.message(Command(commands=["sendall"]), F.reply_to_message, F.chat.type == 'private', F.from_user.id == 5181800215)
async def cmd_sendall(message: Message):
    text = message.reply_to_message
    users = db.get_users()
    for row in users:
        #if message.reply_to_message.text:
        try:     
            await message.reply_to_message.copy_to(row[0])
        except Exception as e:
            print(e)
            
                
                

           



@router.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    """
    –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /help
    """
   
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="üïã –í–ª–∞–¥–µ–ª–µ—Ü", url="https://t.me/ansdamn")
    )
    builder.row(InlineKeyboardButton(
        text="‚õ© –í–µ–±—Å–∞–π—Ç",
        url="https://yourmom.tk")
    )
    await message.answer(
        "–ó–∞ —Å–ø–∞–º –ø—Ä–æ–ø–∏—Å—ã–≤–∞—é –≤ –µ–±–∞–ª–æ")
    
    

# urlkb = InlineKeyboardMarkup(row_width=1)
# urlButton = InlineKeyboardButton(text={message.from_user.first_name}, url='tg://user?id={message.from_user.id}')
# urlkb.add(urlButton)


@router.message(F.text)
async def text_message(message: Message, bot: Bot):
    """
    –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞(-–æ–≤)
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=f"{message.from_user.first_name}", url=f"tg://user?id={message.from_user.id}")
    )
    
    builderz = InlineKeyboardBuilder()
    builderz.row(InlineKeyboardButton(
        text="ü´Ç –í—Å—Ç—É–ø–∏—Ç—å", url="https://t.me/+Tr4jNXkJUjoxNDhl")
    )
    if len(message.text) > 4000:
        return await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª–∏–Ω–∞ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä. "
                                   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Å–≤–æ—é –º—ã—Å–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    
    check_member = await bot.get_chat_member(-1001565513038, message.from_user.id)
   
        

    if message.from_user.id in banned:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ—Ä –±–æ—Ç–∞ —Ä–µ—à–∏–ª —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã. –õ–æ—Ö.")
    elif message.from_user.id in shadowbanned:
        return
    elif check_member.status not in ["member", "creator"]:
        return await message.reply(f"<b>–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ, –≤—Å—Ç—É–ø–∏—Ç–µ –∏ –∂–¥–∏—Ç–µ –∞–ø–ø—Ä—É–≤–∞</b>", parse_mode="HTML", reply_markup=builderz.as_markup())
    else:
        await bot.send_message(
            config.admin_chat_id,
            message.html_text + f"\n\n<tg-spoiler>#id{message.from_user.id}</tg-spoiler>", parse_mode="HTML", reply_markup=builder.as_markup()
        )
        create_task(_send_expiring_notification(message))


@router.message(SupportedMediaFilter())
async def supported_media(message: Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–º. –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –≤–Ω–∏–∑—É)

    :param message: –º–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=f"{message.from_user.first_name}", url=f"tg://user?id={message.from_user.id}")
    )
    
    builderz = InlineKeyboardBuilder()
    builderz.row(InlineKeyboardButton(
        text="ü´Ç –í—Å—Ç—É–ø–∏—Ç—å", url="https://t.me/+Tr4jNXkJUjoxNDhl")
    )
    check_member = await bot.get_chat_member(-1001565513038, message.from_user.id)

    if message.caption and len(message.caption) > 1000:
        return await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä. "
                                   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Å–≤–æ—é –º—ã—Å–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    if message.from_user.id in banned:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ—Ä –±–æ—Ç–∞ —Ä–µ—à–∏–ª —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã. –õ–æ—Ö.")
    elif message.from_user.id in shadowbanned:
        return
    elif check_member.status not in ["member", "creator"]:
        return await message.reply(f"<b>–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∂–¥–∏—Ç–µ –∞–ø–ø—Ä—É–≤–∞</b>", parse_mode="HTML", reply_markup=builderz.as_markup())
    else:
        await message.copy_to(
            config.admin_chat_id,
            caption=((message.caption or "") + f"\n\n<tg-spoiler>#id{message.from_user.id}</tg-spoiler>"),
            parse_mode="HTML", reply_markup=builder.as_markup()
        )
        create_task(_send_expiring_notification(message))


@router.message()
async def unsupported_types(message: Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç.–µ. —Ç–µ, –∫ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content_type not in (
            ContentType.NEW_CHAT_MEMBERS, ContentType.LEFT_CHAT_MEMBER, ContentType.VIDEO_CHAT_STARTED,
            ContentType.VIDEO_CHAT_ENDED, ContentType.VIDEO_CHAT_PARTICIPANTS_INVITED,
            ContentType.MESSAGE_AUTO_DELETE_TIMER_CHANGED, ContentType.NEW_CHAT_PHOTO, ContentType.DELETE_CHAT_PHOTO,
            ContentType.SUCCESSFUL_PAYMENT, "proximity_alert_triggered",  # –≤ 3.0.0b3 –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-—Ç–∞–π–ø–∞
            ContentType.NEW_CHAT_TITLE, ContentType.PINNED_MESSAGE):
        await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.")


# @krentobot
@router.message(Command(commands=["kitty"]), F.chat.type == 'private')
async def cmd_kitty(message: Message):
    cats = [
        'CAACAgIAAxkBAAEEYgRiTKPmQH2TqmM0AlfB3lxBD8GrbgACLhcAAnbsqUhSONZmcbrzYSME',
        'CAACAgIAAxkBAAEEYgZiTKP18IIy7FOK7zA814u87sHgUQACKxYAAlL-QUkTlcssdcKwByME',
        'CAACAgIAAxkBAAEEYghiTKQMdOMLAuOjLG7AriQbH67I8AACIhMAAjGVQUnDun6DQKPWQSME',
        'CAACAgIAAxkBAAEEYgpiTKQbnBTk1UY7qFMYfe4oujUafQACeBcAAl5e6Uua4FtQMS7rZiME',
        'CAACAgIAAxkBAAEEYiJiTKUgvRQKchCvU1AcU37WDtAExQACcBIAAo1uGUhRUkL5gjt1WCME',
        'CAACAgIAAxkBAAEEYg5iTKQ1mRwBrD8NSXDESG9ANWrQ7gAC4RcAAjJ2KEhk_AG4J7o5iSME',
        'CAACAgIAAxkBAAEEYiZiTKVTTfGyMNbx1HEBOyGE4tpKPwAC1RYAAnLeMUj1r--RPMdj-yME',
        'CAACAgIAAxkBAAEEYhJiTKRGwaoxEDTTymbs4yLlRA-RngACDBkAAiZiyUtfSS1RShAQXCME',
        'CAACAgIAAxkBAAEEYhRiTKRNRjgIDyX458GLDcOeXmjgFAAC6BQAAmrfyUuCW-2PIL3BMSME',
        'CAACAgIAAxkBAAEEYhZiTKRWadU3pXfDuU1CZjzI93IWTwACnRMAAo3R0UtBlgtVJTVjbCME',
        'CAACAgIAAxkBAAEEYhhiTKRe0brNvzcdhCvwAAEHUpUm18UAAjcUAALP48lL-1cPeXwzvDQjBA',
        'CAACAgIAAxkBAAEEYhpiTKSaefd-Bb4wpK5w4zRRzL-daQAC1xUAAjni0Euew4kBM4ZPZCME',
        'CAACAgIAAxkBAAEEYhxiTKSimOPsp7p3iQEJD0YYTmHGhgAChhoAAq2BwUtEuouDJcO3XyME',
        'CAACAgIAAxkBAAEEYh5iTKSw5MBJPB5Ph5OpP2RI7vV6PwACixQAAtMncEjDbeKmKcIRGCME',
        'CAACAgIAAxkBAAEEYi5iTKq9CRnVCBpsFNGpY8SpPCOiwAACMxUAAhZmSEkuOG9iyhH7RSME',
        'CAACAgIAAxkBAAEEYjBiTKrSt7y5PvuqUHbQyMFiuMgxFgAC9BUAAmAPKEjThgapEZbujCME',
        'CAACAgIAAxkBAAEEYkZiTKv8rr6zQqbgOVcuQ6mkEtSazwACxRcAAkHhKEgeEKdULvTz5yME',
        'CAACAgIAAxkBAAEEYjRiTKtAWDAmF0qmb6IT0XdOEaPxqAAC0Q8AAqeAyEtx1lPcgJ-pWSME',
        'CAACAgIAAxkBAAEEYjViTKtBj0PUbErAmQlj1VgRDxrmqgACChoAAojy0EtnWpcq_Ye04SME',
        'CAACAgIAAxkBAAEEYjhiTKtS0O5HkzliYfqujynZCtjlBwACqRYAAqnQ0UtEsMKQ0Z3RbyME',
        'CAACAgIAAxkBAAEEYjpiTKtYcpEwD8SEsslWszSf59_zNgACpBIAAopt8EuzZOCk0OgHQSME',
        'CAACAgIAAxkBAAEEYjxiTKt2hLBBJiUUm9dlwsuWFegIFwACdhcAAtUsaUh8hC0Y9ciSbyME',
        'CAACAgIAAxkBAAEEYj5iTKt_yOM7HeXRwZUjVIBGuP8sjgACjhcAAgzYaUjbXjCV4aGCOyME',
        'CAACAgIAAxkBAAEEYkJiTKuuyLA_bXE1xoVc_msY1x1xjAAC3hYAAkAi6Ut6vdE_cd-0-yME'
    ]
    await message.answer_sticker(cats[random.randint(0,len(cats) - 1)])


